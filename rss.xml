<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hello World</title>
        <link>https://blog.jinwei.me</link>
        <description>Freedom is my birth right and I shall have it.</description>
        <atom:link href="https://blog.jinwei.me/rss" rel="self" type="application/rss+xml" />
        
        <item>
            <title>2017观影记录 — Hello World</title>
            <description>
                
  
2017观影记录¶




Publish Date:2017-12-30



2017年马上就结束了。掐指一算，2017年看了好多电影。包括线上和线下电影院的。
线下电影院观影记录（按时间顺序，以中国大陆上映时的片名为准）：

星球大战外传：侠盗一号 （Rogue One: A Star Wars Story）
太空旅客 （Passengers）
降临 （Arrival）
极限特工：终极回归 （xXx: The Return of Xander Cage）
生化危机6：终章 （Resident Evil: The Final Chapter）
金刚狼3：殊死一战 （Logan）
攻壳机动队 （Ghost in the Shell）
速度与激情8 （The Fate of the Furious）
拆弹专家
大护法
战狼2
星际特工：千星之城 （Valérian et la Cité des mille planètes）
看不见的客人 （Contratiempo）
英伦对决 （The Foreigner）
天才枪手 （ฉลาดเกมส์โกง）
王牌特工2：黄金圈 （Kingsman: The Golden Circle）
全球风暴 （Geostorm）
东方快车谋杀案 （Murder on the Orient Express）
雷神3：诸神黄昏 （Thor: Ragnarok）
追捕
至暗时刻 （Darkest Hour）
寻梦环游记 （Coco）
至爱梵高·星空之谜 （Loving Vincent）
芳华

线上观影记录（包括BT下载以及Netflix，包括电影/纪录片/部分美剧，不完全）：

Blade Runner (1982)
Blade Runner 2049
Love Actually
World War Z
Dunkirk
Everst
霸王别姬
Titanic
隧道 （터널）
London Has Fallen
出租车司机 （택시운전사）
Ocean’s Eleven
Ocean’s Twelve
Shooter
Knight Day
2001: A Space Odyssey
Minority Report
Deep Impact
Area 51
San Andreas
I, Origin
Particle Fever
City 40
Stranger Things
House Of Cards, Season 1

现在回忆一下，很多电影的质量其实很一般，属于看完之后走出电影院差不多就能忘记剧情的那种。这种电影很多都是所谓的「商业大片」，追求特效和画面，完全不考虑剧情的质量和观众的观影感受。
简单分析了一下，线下观影的统计

6月居然一部都没看，是因为工作太饱和了还是因为没有好看的电影呢？



                
                
                
                
                
            </description>
            <pubDate>2017-12-30</pubDate>
            <link>https://blog.jinwei.me/_posts/2017/12/movies.html</link>
            <guid isPermaLink="true">https://blog.jinwei.me/_posts/2017/12/movies.html</guid>
        </item>
        
        <item>
            <title>又一个新的博客 — Hello World</title>
            <description>
                
  
又一个新的博客¶




Publish Date:2018-01-15



前段时间有朋友和我抱怨博客加载速度太慢了（。之前的博客架在Blogger上，为了让排版稍微美观一些，找了一个第三方的主题，加载了许多外部的
资源，导致网页载入速度非常慢。虽然我自己对于网站在国内的加载速度毫不在意，但是既然还有读者（少的可怜）在看，以及在这极少的读者中有用
户提出了这个问题，那就得解决。前段时间无意中看到一个博客（ git-pull ），觉得主题简洁而又美观，于是开始
着手改造自己的博客。
这次用了「大名鼎鼎」的 Sphinx ，一个软件开发过程中的文档生成工具来作为博客的静态网页生成引擎。
上手Sphinx非常简单，sphinx-quickstart这个工具和一般的博客生成器一样，集成了很多功能，把Makefile都写好了，可以说是完全开箱即用了。
Sphinx的默认主题是 Alabaster ，现在你看到的这个主题就是在Alabaster上修改而来的。
Sphinx的文档书写采用的是*.rst格式的文本，即 reStructuredText ，而不是Markdown。相比
之前，rst比Markdown的语法更加丰富/复杂，同时也提供了更加丰富的功能和可扩展性（虽然我估计我只能用到其中的20%甚至更少啦）。不清楚rst和
Emacs社区的 Org Mode 相比哪一个的语法更加复杂呢。（
建设博客离不开几件事情。首先当然就是部署运维啦。Sphinx通过Makefile可以生成静态html网页，托管静态html最方便的地方当然是GitHub Pages啦。
最简单粗暴的方法是在本地的环境中写完rst文本，然后本地 make html 通过之后，将html推送到GitHub Pages中。但是这种方式的移植性不高，想写
博客的话必须坐在自己的电脑前，同时依然存在一些手动的工作。所以当然选择Docker啦。但是这次用Docker的姿势和以往不同。平时我们用Docker的时候
最终都是想要得到docker build的产物docker image，然后由image来进行部署。但是我们这次的目标是GitHub Pages，没法部署容器。所以我在
Dockerfile中生成静态html网页，然后在构建的过程中将静态网页push到repo的gh-pages分支中。当然其实不用Docker也能做到这一点。写一个脚本，
然后在CI平台上执行脚本也行，就不做优劣对比了。
值得一提的是，Docker在17.05-ce版本之后引入了multi stage build的功能，可以在Dockerfile中FROM多个基础镜像，在下一个stage可以直接使用
之前stage构建出的产物。以我的博客这个项目为例。假如我是想通过image来部署，那么我最终的产物是静态html文件，那么我可能需要一个nginx的基础
镜像。nginx:alpine 这个基础镜像很小，不到10MB，在Dockerfile里面将html文件COPY进去之后，最终得到的image也只有10MB左右的大小。但是
之前我们为了得到静态html文件，可能得选用一个python的基础镜像，然后再apt/apk安装一些必要的编译工具，最终只是为了几百kb的html文件，但是
构建的镜像已经上百MB了。有了multi stage build之后，这个问题便非常好地被解决了。看了下面的Dockerfile之后，整体思路就非常清晰了。目前我
在本地写完rst文本，然后git push之后，CircleCI会自动进行Dockerfile的构建，然后将编译生成的静态html推送到gh-pages分支。
FROM python:3.6.0 as builder
LABEL maintainer=clarkzjw&lt;hello@jinwei.me&gt;
RUN pip install virtualenv
COPY requirements.txt /app/requirements.txt
COPY bootstrap.py /app/bootstrap.py
RUN /app/bootstrap.py
ADD . /app
WORKDIR /app
RUN /bin/bash -c &#34;source /app/.venv/bin/activate &amp;&amp; make html &amp;&amp; make rss &amp;&amp; cp rss.xml _build/html&#34;


FROM alpine:latest
RUN sed -i &#39;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#39; /etc/apk/repositories
RUN apk add --update git openssh-client &amp;&amp; rm -rf /var/cache/apk/*
WORKDIR /html
ENV COMMIT_USER=&#34;clarkzjw&#34;
ENV COMMIT_EMAIL=&#34;hello@jinwei.me&#34;
ARG GIT_TOKEN=&#34;&#34;
RUN git config --global user.email $COMMIT_EMAIL &amp;&amp; git config --global user.name $COMMIT_USER
RUN git clone https://clarkzjw:$GIT_TOKEN@github.com/clarkzjw/blog.jinwei.me.git /html &amp;&amp; git checkout gh-pages
COPY --from=builder /app/_build/html /html
RUN echo &#34;`date`&#34; &gt; /html/.lastmodify &amp;&amp; git add -A &amp;&amp; git commit -m &#34;`date`&#34; &amp;&amp; git push origin gh-pages


FROM nginx:alpine
COPY --from=builder /app/_build/html /usr/share/nginx/html


另外一个问题是博客的RSS。由于Sphinx最初的设计是作为一个文档生成工具，目前市面上有的和Sphinx结合的RSS生成工具大致有：

Sphinx-contrib模块中的 feed
在sphinxcontrib.feed基础上开发的 sphinxfeed
以及更新一点的 sphinxcontrib-newsfeed

其中sphinxcontrib.feed和sphinxfeed的功能性更新都停止在2011年，不兼容Python 3，GitHub上有几个fork，但是也基本没有太多的改进。至于
sphinxcontrib-newsfeed，并不能生成符合RSS规范的输出。。。所以只好自己简单粗暴造一个轮子了！（至少生成的xml能被RSS阅读器认识。。。
至于评论嘛。虽然博客流量小，2017年下来一年也没有10条评论，但是作为一个博客，这个功能还是必须得有！考察了目前市面上的评论方案，Disqus现在
差不多可以算是一家独大了。但是十分不喜欢Disqus。一个页面要加载的无关的数据太多了。然后看到了 Isso , 第一印象还不错，但是需要自己单独部
署。为了一年10条评论不到的数量级单独部署似乎成本略高。之前还见到了 Staticman , 但是这个方案和GitHub的issue绑定，一个博客实例对应
GitHub的一个repo，然后每篇文章的评论对应这个repo中的issue。但是我不太能接受，毕竟不能强制每个评论的用户都有GitHub帐号。
今天无意中看到了 just-comments , 也是一个SaaS解决方案，但是非常地极简，决定先用着试试效果。（
下一步，打算在博客中加入 漢字標準格式 这套排版框架。毕竟现在的页面排版看起来怪怪的，以及并不美观。（



                
                
                
                
                
            </description>
            <pubDate>2018-01-15</pubDate>
            <link>https://blog.jinwei.me/_posts/2018/01/new-blog.html</link>
            <guid isPermaLink="true">https://blog.jinwei.me/_posts/2018/01/new-blog.html</guid>
        </item>
        
    </channel>
</rss>
